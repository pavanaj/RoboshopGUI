
#include <FL/Fl_Menu.H> //this is different from our Menu bar in main. So include it 
#include <math.h>

class MyInput : public Fl_Input {
	static void Copy_CB(Fl_Widget*, void *userdata) {
		
		MyInput *in = (MyInput*)userdata;
		in->copy(0);    // text selection clipboard
		in->copy(1);    // copy/paste clipboard
	}
	static void Paste_CB(Fl_Widget*, void *userdata) {
		
		MyInput *in = (MyInput*)userdata;
		Fl::paste(*in, 1);    // 09/03/2013 fix: added ",1" to help paste from e.g. notepad
	}
public:
	int handle(int e) {
		switch (e) {
		case FL_PUSH:
			// RIGHT MOUSE PUSHED? Popup menu on right click
			if (Fl::event_button() == FL_RIGHT_MOUSE) {
				Fl_Menu_Item rclick_menu[] = {
					{ "Copy",   0, Copy_CB,  (void*)this },
					{ "Paste",  0, Paste_CB, (void*)this },
					{ 0 }
				};
				const Fl_Menu_Item *m = rclick_menu->popup(Fl::event_x(), Fl::event_y(), 0, 0, 0);
				if (m) m->do_callback(0, m->user_data());
				return(1);          // (tells caller we handled this event)
			}
			break;
		case FL_RELEASE:
			// RIGHT MOUSE RELEASED? Mask it from Fl_Input
			if (Fl::event_button() == FL_RIGHT_MOUSE) {
				return(1);          // (tells caller we handled this event)
			}
			break;
		}
		return(Fl_Input::handle(e));    // let Fl_Input handle all other events
	}
	MyInput(int X, int Y, int W, int H, const char*L = 0) :Fl_Input(X, Y, W, H, L) {
	}
};

void RoboPartsCB(Fl_Widget* w, void* p)
{
	Fl_Window *CRP = new Fl_Window(1280,720);

	MyInput *model_no = new MyInput(150, 50, 100, 30, "Model Number : ");//Child 0
	MyInput *model_name = new MyInput(450, 50, 100, 30, "Model Name : ");//Child 1
	MyInput *description = new MyInput(750, 50, 200, 30, "Description : "); //Child 2

	MyInput *headpartno = new MyInput(150, 100, 100, 30, "Head PartNo : "); //Child 3
	MyInput *headname = new MyInput(450, 100, 100, 30, "Head Name : "); //Child 4
	MyInput *headtype = new MyInput(150, 150, 100, 30, "Head Type : "); //Child 5
	MyInput *headcost = new MyInput(450, 150, 100, 30, "Head Cost : "); //Child 6
	MyInput *headweight = new MyInput(150, 200, 100, 30, "Head Weight : "); //Child 7


	MyInput *torsopartno = new MyInput(750, 100, 100, 30, "Torso PartNo : "); //Child 8
	MyInput *torsoname = new MyInput(1050, 100, 100, 30, "Torso Name : "); //Child 9
	MyInput *torsotype = new MyInput(750, 150, 100, 30, "Torso Type : "); //Child 10
	MyInput *torsocost = new MyInput(1050, 150, 100, 30, "Torso Cost : "); //Child 11
	MyInput *torsoweight = new MyInput(750, 200, 100, 30, "Torso Weight : ");//Child 12
	MyInput *compartments = new MyInput(1050, 200, 100, 30, "Torso Compartments : "); //Child 13

	MyInput *locomoterpartno = new MyInput(150, 250, 100, 30, "Locomoter PartNo : ");//Child 14
	MyInput *locomotername = new MyInput(450, 250, 100, 30, "Locomoter Name : ");//Child 15
	MyInput *locomotertype = new MyInput(150, 300, 100, 30, "Locomoter Type : ");//Child 16
	MyInput *locomotercost = new MyInput(450, 300, 100, 30, "Locomoter Cost : ");//Child 17
	MyInput *locomoterweight = new MyInput(150, 350, 100, 30, "Locomoter Weight : ");//Child 18
	MyInput *maxspeed = new MyInput(450, 350, 100, 30, "Locomoter MaxSpeed : ");//Child 19
	MyInput *power_consumed = new MyInput(450, 400, 100, 30, "Locomoter PowerConsumed : ");//Child 20

	MyInput *batterypartno = new MyInput(750, 250, 100, 30, "Battery PartNo : ");//Child 21
	MyInput *batteryname = new MyInput(1050, 250, 100, 30, "Battery Name : ");//Child 22
	MyInput *batterytype = new MyInput(750, 300, 100, 30, "Battery Type : ");//Child 23
	MyInput *batterycost = new MyInput(1050, 300, 100, 30, "Battery Cost : ");//Child 24
	MyInput *batteryweight = new MyInput(750, 350, 100, 30, "Battery Weight : ");//Child 25
	MyInput *maxpower = new MyInput(1050, 350, 100, 30, "Battery MaxPower : ");//Child 26
	MyInput *energy = new MyInput(750, 400, 100, 30, "Battery Energy : ");//Child 27

	MyInput *armspartno = new MyInput(150, 450, 100, 30, "Arms PartNo : ");//Child 28
	MyInput *armsname = new MyInput(450, 450, 100, 30, "Arms Name : ");//Child 29
	MyInput *armstype = new MyInput(150, 500, 100, 30, "Arms Type : ");//Child 30
	MyInput *armscost = new MyInput(450, 500, 100, 30, "Arms Cost : ");//Child 31
	MyInput *armsweight = new MyInput(150, 550, 100, 30, "Arms Weight : ");//Child 32
	MyInput *armspower = new MyInput(450, 550, 100, 30, "Arms Power : ");//Child 33
	MyInput *noofarms = new MyInput(150, 600, 100, 30, "Arms Number : ");//Child 34

	MyInput *image = new MyInput(450, 600, 100, 30, "Image : "); //Child 35


	Fl_Button *Enter = new Fl_Button(625, 625, 100, 50, "ENTER");
	Enter->callback(EnterRoboPartsCB);
	
	CRP->show();
	view->redraw();
}




void ProfitCB(Fl_Widget* w, void* p)
{

	Fl_Window  *win = new Fl_Window(600, 400, "Profit");
	Fl_Multiline_Output *BR = new Fl_Multiline_Output(10, 10, win->w() - 20, win->h() - 20);

	
	BR->type(FL_MULTILINE_OUTPUT);
	BR->textfont(FL_COURIER);

	
	string result = "Robot Name \t Profit ($)\n";


	for (int i = 0; i < Robots.size(); i++)
	{
		result += Robots[i].r_name + " \t " + DTS(Robots[i].r_profit) + "\n";
		
	}
	BR->value(result.c_str());
	win->resizable(BR);
	win->end();
	win->show();
	view->redraw();
}


void OrdersCB(Fl_Widget* w, void* p)
{
	Fl_Window  *win = new Fl_Window(1000, 980, "Orders");
	Fl_Multiline_Output *BR = new Fl_Multiline_Output(10, 10, win->w() - 20, win->h() - 20);

	
	BR->type(FL_MULTILINE_OUTPUT);
	BR->textfont(FL_COURIER);

	
	string result = "Order No \tCust-Name \tRobots Ordered \t  SA-Name \t   Sales-Date \t   Model-Name \t\tNet-Total\n";

	
	for (int i = 0; i < Orders.size(); i++)
	{
		result += Orders[i].order_no + "\t\t" + Orders[i].cust_name + "\t\t" + ITS(Orders[i].robots_ordered) + "\t\t" + Orders[i].sa_name + " \t\t" + Orders[i].sales_date + " \t" + Orders[i].model_name + " \t\t" + DTS(Orders[i].net_total) + "\n";

	}
		BR->value(result.c_str());
		win->resizable(BR);
		win->end();
		win->show();
		view->redraw();
}

void ModelSalesCB(Fl_Widget* w, void* p)
{
	Fl_Window  *win = new Fl_Window(600, 400, "Model Sales");
	Fl_Multiline_Output *BR = new Fl_Multiline_Output(10, 10, win->w() - 20, win->h() - 20);

	
	BR->type(FL_MULTILINE_OUTPUT);
	BR->textfont(FL_COURIER);

	
	string result = "Model Name\tRobots Sold\n";

    	int r_sold=0;
	
	
	for (int i = 0; i < Orders.size(); i++)
	{
		r_sold = 0;
		for (int j = 0; j < Orders.size(); j++)
		{
			if (Orders[i].model_name==Orders[j].model_name)
			{
				r_sold = r_sold + Orders[j].robots_ordered;
				
			}
		}
		result +=  Orders[i].model_name + "  \t" + ITS(r_sold) + "\n";

	}
	BR->value(result.c_str());
	win->resizable(BR);
	win->end();
	win->show();
	view->redraw();

}

void SalesReportCB(Fl_Widget* w, void* p)
{
	Fl_Window  *win = new Fl_Window(600, 400, "Sales Report");
	Fl_Multiline_Output *BR = new Fl_Multiline_Output(10, 10, win->w() - 20, win->h() - 20);

	
	BR->type(FL_MULTILINE_OUTPUT);
	BR->textfont(FL_COURIER);


	string result = "Name of Sales Associate \tTotal Sales\n";

	double total_sales = 0;
	string ans;
	double max;
	int index_no;
	int k;

	for (int i = 0; i < Orders.size(); i++)
	{
		total_sales = 0;
		for (int j = 0; j < Orders.size(); j++)
		{
			if (Orders[i].sa_name == Orders[j].sa_name)
			{
				total_sales = total_sales + Orders[j].net_total;
			}
		}
		result += Orders[i].sa_name + "  \t\t\t" + DTS(total_sales) + "\n";
	}

	BR->value(result.c_str());
	win->resizable(BR);
	win->end();
	win->show();
	view->redraw();

}


	