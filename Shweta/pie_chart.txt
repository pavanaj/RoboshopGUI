
void ChartCB(Fl_Widget* w, void* p)
{

	int x = 50; int y = 50; int w = 50; int h = 100; int numb; int special=1;
	Fl_Color textcolor;
	FL_CHART_ENTRY entries=(FL_CHART_ENTRY *)calloc(sizeof(FL_CHART_ENTRY), FL_CHART_MAX + 1);

	
	int j = 0;
	while(j<Robots.size())
	{
		//fill entries

	}
	numb = sizeof(entries);
	int i;
	double xc, yc, rad;	/* center and radius */
	double tot;		/* sum of values */
	double incr;		/* increment in angle */
	double curang;		/* current angle we are drawing */
	double txc, tyc;	/* temporary center */
	double lh = fl_height();
	/* compute center and radius */
	double h_denom = (special ? 2.3 : 2.0);
	rad = (h - 2 * lh) / h_denom / 1.1;
	xc = x + w / 2.0; yc = y + h - 1.1*rad - lh;
	/* compute sum of values */
	tot = 0.0;
	for (i = 0; i<numb; i++)
		if (entries[i].val > 0.0) tot += entries[i].val;
	if (tot == 0.0) return;
	incr = 360.0 / tot;
	/* Draw the pie */
	curang = 0.0;

	for (i = 0; i<numb; i++)
	{
		if (entries[i].val > 0.0)
		{
			txc = xc; tyc = yc;
			
			fl_color((Fl_Color)entries[i].col);
			fl_begin_polygon(); fl_vertex(txc, tyc);
			fl_arc(txc, tyc, rad, curang, curang + incr*entries[i].val);
			fl_end_polygon();
			fl_color(textcolor);
			fl_begin_loop(); fl_vertex(txc, tyc);
			fl_arc(txc, tyc, rad, curang, curang + incr*entries[i].val);
			fl_end_loop();
			curang += 0.5 * incr * entries[i].val;
			/* draw the label */
			double xl = txc + 1.1*rad*cos(ARCINC*curang);
			fl_draw(entries[i].str,
				(int)rint(xl),
				(int)rint(tyc - 1.1*rad*sin(ARCINC*curang)),
				0, 0,
				xl<txc ? FL_ALIGN_RIGHT : FL_ALIGN_LEFT);
			curang += 0.5 * incr * entries[i].val;
		}
	} 


	win->resizable(win);
	win->end();
	win->show();
	view->redraw();
}

